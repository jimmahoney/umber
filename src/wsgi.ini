# wsgi.ini - umber uwsgi init
#
# See
#    * digitalocean.com/community/tutorials/
#        how-to-serve-flask-applications-with-uswgi-and-nginx-on-ubuntu-18-04
#    * techatbloomberg.com/blog/configuring-uwsgi-production-deployment
#    * github.com/xrmx/uwsgitop
#    * stackoverflow.com/questions/24127601/uwsgi-request-timeout-in-python
#    * uwsgi-docs.readthedocs.io/en/latest/StaticFiles.html
#
# The folders listed below must exist and is writable by
# the uwsgi process which is set to www-data:www-data in
# /etc/systemd/system/umber.service .
#
# Consider the number of cores and available memory when choosing the
# number of processes (workers) and timeouts.  More workers means more
# more simultaneous requests handled, depending on cores & threads;
# however, memory per worker depends on total available system
# memory. Timeouts too high and things may get stuck and/or user waits
# too long; timeouts too low and expensive tasks (e.g. git
# communication) may not finish.
#
# Timeouts and static file handling should be consistent
# with the other configuration files :
#    * /etc/nginx/sites-available/cs.bennington.college
#    * /etc/systemd/system/umber.service
#    * /var/www/umber/src/settings.py
#
##################################################################

[uwsgi]

# python file "wsgi.py" , object "app" within it
module = wsgi:app

strict = true
master = true
vacuum = true
die-on-term = true
need-app = true
single-interpreter = true
enable-threads = true

# connect to nginx through this unix socket
socket = /var/run/umber/uwsgi.sock
chmod-socket = 660

# for uwsgitop (commmmand line statistics)
stats = /var/run/umber/stats.sock

# logging
disable-logging = true
log-4xx = true
log-5xx = true
logto = /var/log/umber/uwsgi.log
log-maxsize = 2000000

# number of workers
processes = 5

# worker timeouts
harakiri = 60                        ; kill worker if stuck for 60 seconds

# worker recycling
max-requests = 1000                  ; Restart workers after this many requests
max-worker-lifetime = 3600           ; Restart workers after this many seconds
reload-on-rss = 2048                 ; Restart workers after this much resident memory
worker-reload-mercy = 60             ; How long to wait before forcefully killing workers

# signals
py-call-osafterfork = true

# process names
auto-procname = true
procname-prefix-spaced = umber
