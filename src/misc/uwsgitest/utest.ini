# config options can be either in the command invocation or here
#   $ uwsgi --http-socket :9090
#    OR
#   --- here ---
#   [uwsgi]
#   http-socket = :9090
#

# performance
#  - time-outs
#     ... too high and the user waits too long
#     ... too low and tricky stuff fails
#  - processes 
#     ... more means more requests simultaneously
#     ... but less available memory per process

[uwsgi]

# file "wsgi.py" , object "app" within it
module = wsgi:app

# connect to nginx through this unix socket
socket = utest.sock
chmod-socket = 660

# performance choices
processes = 5

# timeouts - max request time ; must coordinate nginx & uwsgi
# see stackoverflow.com/questions/24127601/uwsgi-request-timeout-in-python 

# processor statiistics with a "top"-like command line app
# see https://github.com/xrmx/uwsgitop
stats = stats.sock

# techatbloomberg.com/blog/configuring-uwsgi-production-deployment/
strict = true
master = true
vacuum = true
die-on-term = true
need-app = true
single-interpreter = true
enable-threads = true

# logging
disable-logging = true
log-4xx = true
log-5xx = true
logto = /var/log/uwsgi/utest.log
log-maxsize = 2000000

# worker recycling
max-requests = 1000                  ; Restart workers after this many requests
max-worker-lifetime = 3600           ; Restart workers after this many seconds
reload-on-rss = 2048                 ; Restart workers after this much resident memory
worker-reload-mercy = 60             ; How long to wait before forcefully killing workers

# hard timeouts
harakiri = 60                        ; kill if stuck for 60 seconds

# signals
py-call-osafterfork = true

# process names
auto-procname = true
procname-prefix = "utest "

